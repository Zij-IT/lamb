def len := rec fn(xs) -> case xs {
  [x, rest @ ..] -> 1 + len(rest),
  [] -> 0,
};

def sum := fn(xs) -> { 
  let x := "THIS SHOULD NOT BE PRINTED";
  let length := len(xs);                
  let helper := rec fn(xs, n) -> {
    if n = 0 {
      xs[n]
    } else {
      xs[n] + helper(xs, n - 1)
    }
  };

  helper(xs, len(xs) - 1)
};

def main := fn() -> {
  print("Should print 0:: ");
  sum([4,3,2,1,-1,-2,-3,-4]) $> println;
  print("Should print 10:: ");
  sum([1,2,3,4]) $> println;

  let sum2 := fn(xs) -> { 
    4
  };

  print("Should print 4:: ");
  [1,2] $> sum2 .> println;

  let helper := rec fn(xs, n) -> {
  if n = 0 {
    xs[n]
  } else {
    xs[n] + helper(xs, n - 1)
  }
  };


  print("Should print 10:: ");
  helper([1,2,3,4], 3) $> print;
};
