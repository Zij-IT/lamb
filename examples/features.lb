-- Neat Language Features

def main
	: fn() -> nil
	= fn() -> {
		-- Lambdas!
		let inc := fn(x) -> x + 1;
		let dec := fn(x) -> x - 1;

		-- Cool new operators!
		let five := 2 $> (inc .> dec .> inc .> inc .> inc);
		println(five);

		let five_backwards := (inc <. inc <. inc <. inc <. dec) <$ 2;
		println(five_backwards);

		-- Shadowing!
		{
			let x := 2;
			println(x);
			let x := "shadowing";
			println(x);
		};


		-- cooler fib when using case and assuming the parser is ever built to match the language goal
		-- let fib := rec fun(x) -> case x {
		-- 	0 | 1 -> x,
		-- 	_ -> fib(x - 1) + fib(x - 2),
		-- };	
	};

def _result: nil = main();
