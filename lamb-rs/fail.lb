-- Works
x := { x := 2; { z := 1; z }};
println(x);
x $> println;

y := { z := 3; x := 1; y := 2; x };
println(y);

-- -- Fails
println({ x := 1; x });
{ x := 1; x } $> println;

q := { z := 1; { x := 2; { y := 3; y; }; }; z };
println(q);

[1,2,3,4][{x := 0; x}] $> println;
println([1,2,3,4][{x := 0; x}]);

{ x := 1; true } || false $> println;

[1,2,3,4][[1,2,3,4][{ x := 0; x }]] $> println;

[1,2,3,4][[1][{ x := 0; x }]] $> println;

{
  x := 2;
  y := 3;
  z := 4;
	println(x);
  x + x + y + z;
};

{
  x := 2;
  println({x := 2; x});
  x + x;
};


println({ y := 8; y });

{
  x := 2;
  y := 100;
  z := y + x + x + x + { y := 3; x := 4; { x := 2; x + y } };
  println(x);
  z := { y := 3; y } + x + x + x + y;
  println(z);
};

x1 := fn(y) -> { z := 4; { x := 2; x $> println; z $> println; } $> println; };
x1("don't print me please.");

y1 := 2 + (fn(x,y,z) -> x + y + case z { 2 -> assert(false), 1 -> 1, })(33,66,1);
y1 $> println;

fib := rec fn(n) -> if n > 1 {
  return fib(n - 1) + fib(n - 2);
} else {
  return n;
};

{
  inc := fn(x) -> x + 1;

  println({ i := (fn(x) -> 2); i }(fib(6)));

  [0,0,9,0,0][{ x := 2; { 1 $> inc $> inc .> { x := inc; x } .> { y := println; y }; }; x }] $> println; 
  println <$ [0,0,9,0,0][{ x := 2; { { y := println; y } <. { x := inc; x } <. inc <. inc <$ 1 }; x }];
  { y := 1; x := fn(x) -> 2; x }(1) $> println;

  x := (fn() -> fn(x) -> [9,8,7,6,5,4,3,2,1][x $> inc .> { x := 2; y := inc .> inc; y } .> inc])();
  ["BAD", "BAD", "BAD", "PRINT_ME", "BAD"][2 $> x] $> println;
};

{
  
  fib := rec fn(n) -> if n > 1 {
    return fib(n - 1) + fib(n - 2);
  } else {
    return n;
  };

  inc := fn(x) -> { return x + 1; };

  println({ fib := (fn(x) -> 2); fib }(fib(6)));

  [0,0,9,0,0][{ x := 2; { 1 $> inc $> inc .> { x := inc; x } .> { y := println; y }; }; x }] $> println; 
  println <$ [0,0,9,0,0][{ x := 2; { { y := println; y } <. { x := inc; x } <. inc <. inc <$ 1 }; x }];
  { y := 1; x := fn(x) -> 2; x }(1) $> println;

  x := (fn() -> fn(x) -> [9,8,7,6,5,4,3,2,1][x $> inc .> { x := 2; y := inc .> inc; y } .> inc])();
  ["BAD", "BAD", "BAD", "PRINT_ME", "BAD"][2 $> x] $> println;
};
