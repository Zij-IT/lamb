/* automatically generated by rust-bindgen 0.66.1 */

pub const MAX_AST_KID_COUNT: u32 = 3;
pub type i64_ = i64;
pub type string = *mut ::std::os::raw::c_char;
pub const AstNodeType_AstntStrLit: AstNodeType = 0;
pub const AstNodeType_AstntNumLit: AstNodeType = 1;
pub const AstNodeType_AstntCharLit: AstNodeType = 2;
pub const AstNodeType_AstntBoolLit: AstNodeType = 3;
pub const AstNodeType_AstntNilLit: AstNodeType = 4;
pub const AstNodeType_AstntIdent: AstNodeType = 5;
pub const AstNodeType_AstntUnaryNeg: AstNodeType = 6;
pub const AstNodeType_AstntUnaryLogNot: AstNodeType = 7;
pub const AstNodeType_AstntUnaryBitNot: AstNodeType = 8;
pub const AstNodeType_AstntBinaryAdd: AstNodeType = 9;
pub const AstNodeType_AstntBinarySub: AstNodeType = 10;
pub const AstNodeType_AstntBinaryMul: AstNodeType = 11;
pub const AstNodeType_AstntBinaryDiv: AstNodeType = 12;
pub const AstNodeType_AstntBinaryMod: AstNodeType = 13;
pub const AstNodeType_AstntBinaryLCompose: AstNodeType = 14;
pub const AstNodeType_AstntBinaryRCompose: AstNodeType = 15;
pub const AstNodeType_AstntBinaryLApply: AstNodeType = 16;
pub const AstNodeType_AstntBinaryRApply: AstNodeType = 17;
pub const AstNodeType_AstntBinaryLogAnd: AstNodeType = 18;
pub const AstNodeType_AstntBinaryLogOr: AstNodeType = 19;
pub const AstNodeType_AstntBinaryEq: AstNodeType = 20;
pub const AstNodeType_AstntBinaryNe: AstNodeType = 21;
pub const AstNodeType_AstntBinaryGt: AstNodeType = 22;
pub const AstNodeType_AstntBinaryGe: AstNodeType = 23;
pub const AstNodeType_AstntBinaryLt: AstNodeType = 24;
pub const AstNodeType_AstntBinaryLe: AstNodeType = 25;
pub const AstNodeType_AstntBinaryOr: AstNodeType = 26;
pub const AstNodeType_AstntBinaryXor: AstNodeType = 27;
pub const AstNodeType_AstntBinaryAnd: AstNodeType = 28;
pub const AstNodeType_AstntBinaryRShift: AstNodeType = 29;
pub const AstNodeType_AstntBinaryLShift: AstNodeType = 30;
pub const AstNodeType_AstntIf: AstNodeType = 31;
pub const AstNodeType_AstntCase: AstNodeType = 32;
pub const AstNodeType_AstntCaseArm: AstNodeType = 33;
pub const AstNodeType_AstntArray: AstNodeType = 34;
pub const AstNodeType_AstntFuncDef: AstNodeType = 35;
pub const AstNodeType_AstntFuncCall: AstNodeType = 36;
pub const AstNodeType_AstntArrayIndex: AstNodeType = 37;
pub const AstNodeType_AstntReturn: AstNodeType = 38;
pub const AstNodeType_AstntExprStmt: AstNodeType = 39;
pub const AstNodeType_AstntAssignStmt: AstNodeType = 40;
pub const AstNodeType_AstntBlock: AstNodeType = 41;
pub const AstNodeType_AstntNodeList: AstNodeType = 42;
pub type AstNodeType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AstNode {
    pub kids: [*mut AstNode; 3usize],
    pub val: AstNode__bindgen_ty_1,
    pub type_: AstNodeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AstNode__bindgen_ty_1 {
    pub s: string,
    pub i: string,
    pub c: ::std::os::raw::c_char,
    pub b: bool,
    pub n: i64_,
}
#[test]
fn bindgen_test_layout_AstNode__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<AstNode__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AstNode__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(AstNode__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<AstNode__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(AstNode__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode__bindgen_ty_1),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode__bindgen_ty_1),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode__bindgen_ty_1),
            "::",
            stringify!(n)
        )
    );
}
#[test]
fn bindgen_test_layout_AstNode() {
    const UNINIT: ::std::mem::MaybeUninit<AstNode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AstNode>(),
        40usize,
        concat!("Size of: ", stringify!(AstNode))
    );
    assert_eq!(
        ::std::mem::align_of::<AstNode>(),
        8usize,
        concat!("Alignment of ", stringify!(AstNode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kids) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode),
            "::",
            stringify!(kids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode),
            "::",
            stringify!(type_)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_Z11new_astnode11AstNodeType"]
    pub fn new_astnode(type_: AstNodeType) -> *mut AstNode;
}
extern "C" {
    #[link_name = "\u{1}_Z8free_astP7AstNode"]
    pub fn free_ast(root: *mut AstNode);
}
extern "C" {
    pub fn run_ast(root: *mut AstNode, print_fns: bool, print_main: bool);
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
