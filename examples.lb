-- Mul Table
table := rec fn(x, y, n) -> {
	print(str(x * y) + " ");

	if x != n {
		table(x + 1, y, n);
	} elif y != n{
		println();
		table(0, y + 1, n);
	}
};

println("Please enter a number: ");
table(1, 1, user_int());

-- Fib 
fib := rec fn(n) -> if n <= 1 {
	return n;
} else {
	return fib(n - 1) + fib(n - 2);
};

-- Guessing Game
println("Enter a number! ");
guess := rec fn(n, guess_count) -> {
	x := user_int();
	if x = n {
		println("You guessed it");
		println("You needed " + str(guess_count) + " guesses!")
		println("Would you like to play again (y/n)");
		
		if user_char() = 'y' {
			guess(rand(), 1);
		};
	} else {
		if x > n {
			println("Your number was too high!");
		} else {
			println("Your number was too low!");
		};

		println("Guess again!");
		guess(n, guess_count + 1);
	};
};
guess(rand(), 1);

-- Neat Language Features
inc := fn(x) -> x + 1;
dec := fn(x) -> x - 1;

five := 2 $> (inc .> dec .> inc .> inc .> inc);
five_backwards := (inc <. inc <. inc <. inc <. dec) <$ 2;

x := 2;
x := "shadowing";

-- cooler fib when using case
fib := rec fun(x) -> case x {
	0 | 1 -> x,
	_ -> fib(x - 1) + fib(x - 2),
};
