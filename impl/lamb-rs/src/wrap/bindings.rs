/* automatically generated by rust-bindgen 0.65.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MAX_AST_KID_COUNT: u32 = 3;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type i8_ = i8;
pub type i16_ = i16;
pub type i32_ = i32;
pub type i64_ = i64;
pub type f32_ = f32;
pub type f64_ = f64;
pub type string = *mut ::std::os::raw::c_char;
pub type str_ = *mut ::std::os::raw::c_char;
pub const ParseResult_E_ParseResultAccept: ParseResult_E = 0;
pub const ParseResult_E_ParseResultReject: ParseResult_E = 1;
pub type ParseResult_E = ::std::os::raw::c_uint;
pub use self::ParseResult_E as ParseResult;
pub const AstNodeType_AstntStrLit: AstNodeType = 0;
pub const AstNodeType_AstntNumLit: AstNodeType = 1;
pub const AstNodeType_AstntCharLit: AstNodeType = 2;
pub const AstNodeType_AstntBoolLit: AstNodeType = 3;
pub const AstNodeType_AstntNilLit: AstNodeType = 4;
pub const AstNodeType_AstntIdent: AstNodeType = 5;
pub const AstNodeType_AstntUnaryNeg: AstNodeType = 6;
pub const AstNodeType_AstntUnaryLogNot: AstNodeType = 7;
pub const AstNodeType_AstntUnaryBitNot: AstNodeType = 8;
pub const AstNodeType_AstntBinaryAdd: AstNodeType = 9;
pub const AstNodeType_AstntBinarySub: AstNodeType = 10;
pub const AstNodeType_AstntBinaryMul: AstNodeType = 11;
pub const AstNodeType_AstntBinaryDiv: AstNodeType = 12;
pub const AstNodeType_AstntBinaryMod: AstNodeType = 13;
pub const AstNodeType_AstntBinaryLCompose: AstNodeType = 14;
pub const AstNodeType_AstntBinaryRCompose: AstNodeType = 15;
pub const AstNodeType_AstntBinaryLApply: AstNodeType = 16;
pub const AstNodeType_AstntBinaryRApply: AstNodeType = 17;
pub const AstNodeType_AstntBinaryLogAnd: AstNodeType = 18;
pub const AstNodeType_AstntBinaryLogOr: AstNodeType = 19;
pub const AstNodeType_AstntBinaryEq: AstNodeType = 20;
pub const AstNodeType_AstntBinaryNe: AstNodeType = 21;
pub const AstNodeType_AstntBinaryGt: AstNodeType = 22;
pub const AstNodeType_AstntBinaryGe: AstNodeType = 23;
pub const AstNodeType_AstntBinaryLt: AstNodeType = 24;
pub const AstNodeType_AstntBinaryLe: AstNodeType = 25;
pub const AstNodeType_AstntBinaryOr: AstNodeType = 26;
pub const AstNodeType_AstntBinaryXor: AstNodeType = 27;
pub const AstNodeType_AstntBinaryAnd: AstNodeType = 28;
pub const AstNodeType_AstntBinaryRShift: AstNodeType = 29;
pub const AstNodeType_AstntBinaryLShift: AstNodeType = 30;
pub const AstNodeType_AstntIf: AstNodeType = 31;
pub const AstNodeType_AstntCase: AstNodeType = 32;
pub const AstNodeType_AstntCaseArm: AstNodeType = 33;
pub const AstNodeType_AstntArray: AstNodeType = 34;
pub const AstNodeType_AstntFuncDef: AstNodeType = 35;
pub const AstNodeType_AstntFuncCall: AstNodeType = 36;
pub const AstNodeType_AstntArrayIndex: AstNodeType = 37;
pub const AstNodeType_AstntReturn: AstNodeType = 38;
pub const AstNodeType_AstntExprStmt: AstNodeType = 39;
pub const AstNodeType_AstntAssignStmt: AstNodeType = 40;
pub const AstNodeType_AstntBlock: AstNodeType = 41;
pub const AstNodeType_AstntNodeList: AstNodeType = 42;
pub type AstNodeType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AstNode_T {
    pub kids: [*mut AstNode_T; 3usize],
    pub val: AstNode_T__bindgen_ty_1,
    pub type_: AstNodeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AstNode_T__bindgen_ty_1 {
    pub s: string,
    pub i: string,
    pub c: ::std::os::raw::c_char,
    pub b: bool,
    pub n: i64_,
}
#[test]
fn bindgen_test_layout_AstNode_T__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<AstNode_T__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AstNode_T__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(AstNode_T__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<AstNode_T__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(AstNode_T__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode_T__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode_T__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode_T__bindgen_ty_1),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode_T__bindgen_ty_1),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode_T__bindgen_ty_1),
            "::",
            stringify!(n)
        )
    );
}
#[test]
fn bindgen_test_layout_AstNode_T() {
    const UNINIT: ::std::mem::MaybeUninit<AstNode_T> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AstNode_T>(),
        40usize,
        concat!("Size of: ", stringify!(AstNode_T))
    );
    assert_eq!(
        ::std::mem::align_of::<AstNode_T>(),
        8usize,
        concat!("Alignment of ", stringify!(AstNode_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kids) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode_T),
            "::",
            stringify!(kids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode_T),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AstNode_T),
            "::",
            stringify!(type_)
        )
    );
}
pub type AstNode = AstNode_T;
extern "C" {
    pub fn new_astnode(type_: AstNodeType) -> *mut AstNode;
}
extern "C" {
    pub fn new_unary_astnode(type_: AstNodeType, rhs: *mut AstNode) -> *mut AstNode;
}
extern "C" {
    pub fn new_binary_astnode(
        type_: AstNodeType,
        lhs: *mut AstNode,
        rhs: *mut AstNode,
    ) -> *mut AstNode;
}
extern "C" {
    pub fn free_ast(root: *mut AstNode);
}
extern "C" {
    pub fn eval_ast(root: *mut AstNode) -> i64_;
}
